Memoized
========

Non-memoized new LeagueTable vs Cached Sequence
-----------------------------------------------

Results     Cached Seq cold     Cached Seq warm     Plain Function cold     Plain function warm

10k         85                  4                   450                     450
100k        900                 2                   7981                    7300

LeagueTable with classes LeagueTable and Team memoized
------------------------------------------------------

Results     Cold        Warm
10k         120         3
100k        1350        3


LeagueTable with results mapped by team
---------------------------------------

Results     Cold        Warm
10k         90          3
100k        850         3


Ideas
-----
- Speed up recalc by indexing inputs
- General purpose watcher on any value linked to input notifications
- Memoizing easier on functional objects, as most functions are no-args properties
- Maybe functions with args have to be functional objects, so can be memoized - eg BalanceSheet
- Memoizing getters with complex calcs (LeagueTable, Team) gets cold performance close to cached sequences
- Incremental additions still same as cold for memoized, but much quicker for cached sequence
- Memoizing simple getters (MatchResult, TeamResult) is actually slower by 50% - 100%
- Calculating TeamResult and MatchResult props in constructor and storing made no measurable difference - presumably only called once anyway
- Grouping an into a map that can be memoized is both clear to use and better performance
- If can memoize a property returning a map, effectively like memoizing a function